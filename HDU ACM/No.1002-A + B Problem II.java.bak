/*
 * No.1001: Exponentiation
 *
 * Description:
 *
 * Problems involving the computation of exact values of very large magnitude and precision are common. 
 * For example, the computation of the national debt is a taxing experience for many computer systems. 
 *
 * This problem requires that you write a program to compute the exact value of Rn 
 * where R is a real number ( 0.0 < R < 99.999 ) and n is an integer such that 0 < n <= 25.
 *
 * Input:
 *
 * The input will consist of a set of pairs of values for R and n. 
 * The R value will occupy columns 1 through 6, and the n value will be in columns 8 and 9.
 * 
 * Output:
 *
 * The output will consist of one line for each line of input giving the exact value of R^n. 
 * Leading zeros should be suppressed in the output. Insignificant trailing zeros must not be printed. 
 * Don't print the decimal point if the result is an integer.
 *
 * Sample Input:
 *
 * 95.123 12
 * 0.4321 20
 * 5.1234 15
 * 6.7592  9
 * 98.999 10
 * 1.0100 12
 * 
 * Sample Output:
 *
 * 548815620517731830194541.899025343415715973535967221869852721
 * .00000005148554641076956121994511276767154838481760200726351203835429763013462401
 * 43992025569.928573701266488041146654993318703707511666295476720493953024
 * 29448126.764121021618164430206909037173276672
 * 90429072743629540498.107596019456651774561044010001
 * 1.126825030131969720661201
 */

#include <stdio.h>
#include <string.h>

int len; // total length of exponentiation result
int product[126] = {0}; // storing result, at most length 5*25 + 1 = 126

void multiply(int a[], int n)
{
        int i;
        int carry = 0; // a carry number in multiplying
        for (i = 0; i < len; i++) {
                int temp = a[i] * n + carry;
                a[i] = temp % 10;
                carry = temp / 10;      
        }
        while (carry) {
                a[i++] = carry % 10;
                carry /= 10;
        }
        len = i;
}

int main(int argc, char* argv[])
{
        int n;  // power n
        char s[6]; // real number R, at most the length is 6
        while (scanf("%s %d", s, &n) != EOF) {
                int position = 0, i = 0, num = 0, j = 0;
                for (i = 0; i < strlen(s); i++) {
                        if (s[i] == '.') {
                                position = (strlen(s) - 1 - i) * n; // calculate decimal point position after R^n
                        } else {
                                num = num * 10 + s[i] - 48; // transfer float to integer
                        }       
                }

                // product calculation 
                product[0] = 1;
                len = 1;
                for (i = 0; i < n; i++)
                        multiply(product, num);

                // format output
                if (len <= position) { // product is less than 1
                        printf("."); // print decimal point
                        for (i = 0; i < position - len; i++) {
                                printf("0"); // print zero between decimal point and decimal
                        }

                        j = 0;
                        //while (product[j] == 0) { // trim trailing zeros
                        //    j++;
                        //}
                        for (i = len - 1; i >= j; i--) {
                                printf("%d", product[i]);
                        }
                } else {
                        j = 0;
                        while (product[j] == 0 && j < position) { // trim trailing zeros
                                j++;
                        }
                        for (i = len - 1; i >= j; i--) {
                                if (i + 1 == position) { // cause index in C language starts from 0
                                        printf(".");
                                }
                                printf("%d", product[i]);
                        }
                }
                printf("\n");
        }
}